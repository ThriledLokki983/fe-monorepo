/**
 * NumberField Component Styles
 *
 * Styles for the NumberField component using design system tokens.
 * Built to work with React Aria NumberField for accessibility and theming.
 */

.numberField {
  display: flex;
  flex-direction: column;
  gap: var(--space-xs);
  font-family: var(--font-family-sans);
  position: relative;

  // Size variants
  &.small {
    .label {
      font-size: var(--font-size-xs);
    }
  }

  &.medium {
    .label {
      font-size: var(--font-size-sm);
    }
  }

  &.large {
    .label {
      font-size: var(--font-size-base);
    }
  }

  &[data-disabled] {
    opacity: 0.6;
    pointer-events: none;
  }

  &[data-readonly] {
    .input {
      cursor: default;
    }
  }

  &[data-invalid] {
    .group {
      border-color: var(--color-error);

      &:focus-within {
        border-color: var(--color-error);
        box-shadow: 0 0 0 1px var(--color-error);
      }
    }
  }

  &[data-required] {
    .label::after {
      content: ' *';
      color: var(--color-error);
    }
  }
}

.label {
  display: block;
  font-weight: var(--font-weight-medium);
  color: var(--text1);
  line-height: var(--line-height-tight);
  margin-bottom: var(--space-xxs);

  &[data-disabled] {
    color: var(--text2);
  }

  &[data-required] {
    &::after {
      content: ' *';
      color: var(--color-error);
    }
  }
}

.group {
  position: relative;
  display: flex;
  align-items: center;
  background: var(--surface2);
  border: 1px solid var(--surface4);
  border-radius: var(--radius-md);
  transition: all var(--transition-fast);
  overflow: hidden;

  &:hover {
    border-color: color-mix(in srgb, var(--brand) 30%, var(--surface4));
  }

  &:focus-within {
    border-color: var(--brand);
    box-shadow: 0 0 0 1px var(--brand);
  }

  &[data-invalid] {
    border-color: var(--color-error);

    &:focus-within {
      border-color: var(--color-error);
      box-shadow: 0 0 0 1px var(--color-error);
    }
  }

  &[data-disabled] {
    background: var(--surface3);
    border-color: var(--surface4);
    opacity: 0.6;
    cursor: not-allowed;
  }

  &[data-readonly] {
    background: var(--surface3);
    border-color: var(--surface4);
  }

  // Size variants
  &.small {
    height: 2rem;
    gap: var(--space-xxs);
  }

  &.medium {
    height: 2.5rem;
    gap: var(--space-xs);
  }

  &.large {
    height: 3rem;
    gap: var(--space-sm);
  }

  // Visual variants
  &.success {
    border-color: var(--color-success);

    &:focus-within {
      border-color: var(--color-success);
      box-shadow: 0 0 0 1px var(--color-success);
    }
  }

  &.warning {
    border-color: var(--color-warning);

    &:focus-within {
      border-color: var(--color-warning);
      box-shadow: 0 0 0 1px var(--color-warning);
    }
  }

  &.error {
    border-color: var(--color-error);

    &:focus-within {
      border-color: var(--color-error);
      box-shadow: 0 0 0 1px var(--color-error);
    }
  }
}

.input {
  flex: 1;
  background: transparent;
  border: none;
  outline: none;
  color: var(--text1);
  font-family: var(--font-family-sans);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-normal);
  text-align: right;
  padding: 0 var(--space-sm);

  &::placeholder {
    color: var(--text2);
    opacity: 0.7;
  }

  &[data-disabled] {
    color: var(--text2);
    cursor: not-allowed;
  }

  &[data-readonly] {
    color: var(--text2);
    cursor: default;
  }

  // Size variants
  &.small {
    font-size: var(--font-size-sm);
    padding: 0 var(--space-xs);
  }

  &.medium {
    font-size: var(--font-size-base);
    padding: 0 var(--space-sm);
  }

  &.large {
    font-size: var(--font-size-lg);
    padding: 0 var(--space-md);
  }
}

.stepperButton {
  display: flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  border: none;
  color: var(--text2);
  cursor: pointer;
  transition: all var(--transition-fast);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  user-select: none;
  min-width: 0;
  padding: 0;

  &:hover {
    background: color-mix(in srgb, var(--brand) 10%, transparent);
    color: var(--brand);
  }

  &:active {
    background: color-mix(in srgb, var(--brand) 20%, transparent);
  }

  &:focus-visible {
    outline: 2px solid var(--brand);
    outline-offset: -2px;
  }

  &[data-disabled] {
    color: var(--text3);
    background: transparent;
    cursor: not-allowed;
    opacity: 0.5;
  }

  // Size variants
  &.small {
    width: 1.75rem;
    font-size: var(--font-size-xs);
  }

  &.medium {
    width: 2rem;
    font-size: var(--font-size-sm);
  }

  &.large {
    width: 2.25rem;
    font-size: var(--font-size-base);
  }
}

.decrementButton {
  border-right: 1px solid color-mix(in srgb, var(--surface4) 50%, transparent);
}

.incrementButton {
  border-left: 1px solid color-mix(in srgb, var(--surface4) 50%, transparent);
}

.description {
  font-size: var(--font-size-xs);
  color: var(--text2);
  line-height: var(--line-height-normal);
  margin-top: var(--space-xxs);
}

.errorMessage {
  font-size: var(--font-size-xs);
  color: var(--color-error);
  line-height: var(--line-height-normal);
  margin-top: var(--space-xxs);
  min-height: 1rem;

  &:empty {
    display: none;
  }
}

// Focus management
.numberField:focus-within {
  .stepperButton {
    border-color: color-mix(in srgb, var(--brand) 30%, var(--surface4));
  }
}

// Responsive behavior
@media (max-width: 640px) {
  .stepperButton {
    &.small {
      width: 2rem;
    }

    &.medium {
      width: 2.25rem;
    }

    &.large {
      width: 2.5rem;
    }
  }
}
